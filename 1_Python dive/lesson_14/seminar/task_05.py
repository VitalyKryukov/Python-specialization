# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–∞—Ö –ø–æ –û–û–ü –±—ã–ª —Å–æ–∑–¥–∞–Ω –∫–ª–∞—Å—Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Ö—Ä–∞–Ω—è—â–∏–π –¥–ª–∏–Ω—É –∏ —à–∏—Ä–∏–Ω—É,
# –∞ —Ç–∞–∫–∂–µ –≤—ã—á–∏—Å–ª—è—é—â—É—é –ø–µ—Ä–∏–º–µ—Ç—Ä, –ø–ª–æ—â–∞–¥—å –∏ –ø–æ–∑–≤–æ–ª—è—é—â–∏–π —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏ –≤—ã—á–∏—Ç–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –±–µ—Ä—è –∑–∞ –æ—Å–Ω–æ–≤—É –ø–µ—Ä–∏–º–µ—Ç—Ä.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ 3-7 —Ç–µ—Å—Ç–æ–≤ unittest –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
import unittest
from functools import total_ordering


@total_ordering
class Rectangle:
    def __init__(self, side_a, side_b=None):
        self.side_a = side_a
        self.side_b = side_b if side_b else side_a

    def perimetr(self):
        return (self.side_a + self.side_b) * 2

    def area(self):
        return self.side_a * self.side_b

    def __eq__(self, other):
        if isinstance(other, Rectangle):
            return self.side_a == other.side_a and self.side_b == other.side_b
        return TypeError

    def __lt__(self, other):
        if isinstance(other, Rectangle):
            return self.area() < other.area()
        return TypeError

    def __add__(self, other):
        if isinstance(other, Rectangle):
            return Rectangle(self.side_a + other.side_a, self.side_b + other.side_b)
        return TypeError


class Rectangle_test(unittest.TestCase):
    def setUp(self) -> None:
        self.rectangle_test = Rectangle(4, 5)
        self.revtangle_another = Rectangle(5, 10)

    def test_equals(self):
        self.assertTrue(self.rectangle_test, Rectangle(4, 5))

    def test_add(self):
        self.assertTrue(self.rectangle_test + self.revtangle_another, Rectangle(9, 15))

    def test_lesser(self):
        self.assertTrue(self.rectangle_test < self.revtangle_another)

    def test_perimetr(self):
        self.assertTrue(self.rectangle_test, 18)

    def test_area(self):
        self.assertEqual(self.revtangle_another, 50)


if __name__ == '__main__':
    unittest.main(verbosity=2)

# üìå –î–æ—Ä–∞–±–æ—Ç–∞–µ–º –∑–∞–¥–∞—á–∏ 3 –∏ 4. –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã:
# üìå –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –∑–∞–¥–∞–Ω–∏—è 4)
# üìå –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É - —Ç—Ä–µ–±—É–µ—Ç —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∞–≥–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ï—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞. –ê –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
# üìå –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω—å—à–µ, —á–µ–º –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, –≤—ã–∑—ã–≤–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞.

import json

from my_class import User

from my_exception import LevelError, AccessError, UserIDError
from my_func import create_user_list


class UserSystem:
    def __init__(self, base_path: str):
        self.path = base_path
        self.access = False
        self.user_base = UserSystem._load_user_base(base_path)
        self.authorized_user = None

    @staticmethod
    def _load_user_base(path):
        return create_user_list(path)

    def _save_new_user(self, new_user: User):
        self.user_base.add(new_user)
        data = {}
        for user in self.user_base:
            if str(user.level) in data:
                data[str(user.level)][user.u_id] = user.name
            else:
                data[str(user.level)] = {user.u_id, user.name}
        with open(self.path, 'w', encoding='utf-8') as data_file:
            json.dump(data, data_file, indent=4, ensure_ascii=False)
        self.user_base = create_user_list(self.path)

    def login(self, login_user: User):
        for cur_user in self.user_base:
            if cur_user == login_user:
                self.authorized_user = cur_user
                self.access = True
                print(f'\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {cur_user.name}! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω!\n')
                return cur_user.level
        raise AccessError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ –±–∞–∑–µ')

    def new_user(self, name: str, u_id: str, level: int):
        if self.access:
            if int(self.authorized_user.level) < level:
                raise LevelError(
                    f'–£—Ä–æ–≤–µ–Ω—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –í–∞—à–µ–≥–æ ({int(self.authorized_user.level)} > {level})')
            id_list = {cur_user.u_id for cur_user in self.user.base}
            if u_id in id_list:
                raise UserIDError(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {u_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            new_user = User(name, u_id, level)
            self._save_new_user(new_user)
        else:
            raise AccessError('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞')

    def user_list(self):
        return '\n'.join([user.__str__() for user in self.user_base])

    def __str__(self):
        return f'–°–∏—Å—Ç–µ–º–∞ {"–∞–∫—Ç–∏–≤–Ω–∞" if self.access else "–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"}' + (
            f'{self.authorized_user}' if self.authorized_user else '')


if __name__ == '__main__':
    our_system = UserSystem('worker.json')
    user = User('Stoun', '2345')
    print(our_system)
    print(our_system.user_list())
    print()
    user = User('Stoun', '2345')
    print(our_system.login(user))
    print(our_system)
    our_system.new_user('Valera', '12345', 4)
